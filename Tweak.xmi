
#import "Tweak.h"
#import "PHPreferences.h"
#import "UIImage+PHExtensions.h"

#import <substrate.h>

#import <PhotoLibraryServices/Processed/PLPhotoLibrary.h>
#import <PhotoLibraryServices/Processed/PLManagedAlbum.h>
#import <PhotoLibraryServices/Processed/PLManagedAsset.h>

#import "xctheos.h"


        }
    }
    return false;
}

static UIImage* getRecentImage(){
    
    PLPhotoLibrary *library = [PLPhotoLibrary sharedPhotoLibrary];
    
    PLManagedAlbum *album;
    
    NSLog(@"[Photicon]: Searching for albums...");
    
    for (PLManagedAlbum *album_filtering in [library albums]) {
        if ([album_filtering.localizedTitle isEqualToString:PHAlbumName]) {
            album = album_filtering;
            break;
        }
    }
    
    NSLog(@"[Photicon]: Album search result: %@", album);
    
    if (!album) {
        album = [[library albums] firstObject];
    }
    
    NSOrderedSet *assets = [album assets];
    
    PLManagedAsset *photo;
    
    for (int i = 0; i < assets.count; i++) {
        
        PLManagedAsset *asset_photo = [assets objectAtIndex:((assets.count-1) - i)];
        
        if ([asset_photo isPhoto] && ![asset_photo hidden]) {
            photo = asset_photo;
            break;
        }
    }
    
    if (!photo) {
        album = [[library albums] firstObject];
        assets = [album assets];
        for (int i = 0; i < assets.count; i++) {
            
            PLManagedAsset *asset_photo = [assets objectAtIndex:((assets.count-1) - i)];
            
            if ([asset_photo isPhoto] && ![asset_photo hidden]) {
                photo = asset_photo;
                break;
            }
        }
    }
    
    NSLog(@"[Photicon]: Verify that image is here: %@", [photo mainFileURL]);
    
    UIImage *image = [[UIImage alloc] initWithData:[NSData dataWithContentsOfURL:[photo mainFileURL]]];
    
    return image;
    
}

    }
    
}

static void reloadPhotosIcon(){
    
    NSLog(@"[Photicon]: Will reload icon...");
    
    SBIcon *icon = [[[GET_CLASS(SBIconController) sharedInstance] model] expectedIconForDisplayIdentifier:@"com.apple.mobileslideshow"];
    
    SBIconView *iconView = [[[GET_CLASS(SBIconController) sharedInstance] homescreenIconViewMap] mappedIconViewForIcon:icon];
    
    SBIconImageView *imageView = MSHookIvar<SBIconImageView *>(iconView, "_iconImageView");
    
    [imageView updateImageAnimated:true];
}

GROUP(defaults)

HOOK(SBLockScreenManager)

-(void)_finishUIUnlockFromSource:(int)arg1 withOptions:(id)arg2{
    ORIG();
    if(PHEnabled){
        reloadPhotosIcon();
    }
}


END()


HOOK(SBUIController)

- (BOOL)clickedMenuButton {
    if (PHEnabled()) {
        reloadPhotosIcon();
    }
    return ORIG();
}

END()

HOOK(SBIconImageView)

- (id)contentsImage {
    if (PHEnabled() && [self.icon.applicationBundleID isEqualToString:@"com.apple.mobileslideshow"]) {
        
        UIImage *overlayMask = [[self _currentOverlayImage] resizedToSize:CGSizeMake(256, 256)];
        UIImage *recentImage = getRecentImage();
        UIImage *finalImage;
        
        if ([PHImageEffect() isEqualToString:@"none"]) {
            finalImage = [recentImage maskedToImage:overlayMask];
        } else if ([PHImageEffect() isEqualToString:@"lightblur"]) {
            finalImage = [[recentImage blurred:PHBlurAmount()] maskedToImage:overlayMask];
        } else if ([PHImageEffect() isEqualToString:@"darkblur"]) {
            finalImage = [[recentImage blurred:PHBlurAmount()] maskedToImage:overlayMask];
            finalImage = [finalImage tintedToColor:[UIColor.blackColor colorWithAlphaComponent:0.3]];
        }
        
        return finalImage;
    }
    
    return ORIG();
}

END()

END_GROUP()


CTOR(){
    
    INIT(defaults);
}
